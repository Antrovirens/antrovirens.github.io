<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Atrovirens&#39; Café</title>
  
  <subtitle>来杯下午茶吧</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-26T15:26:01.363Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>antrovirens</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python Projext: Reload</title>
    <link href="http://yoursite.com/2019/07/26/Python-Projext-Reload/"/>
    <id>http://yoursite.com/2019/07/26/Python-Projext-Reload/</id>
    <published>2019-07-26T12:56:03.000Z</published>
    <updated>2019-07-26T15:26:01.363Z</updated>
    
    <content type="html"><![CDATA[<p>两个计划：</p><ul><li>Windows从源代码编译安装tensorflow-gpu 和 pytorch</li><li>利用wsl安装linux环境的tensorflow-cpu</li></ul><p>win10 python3.7.4环境配置</p><blockquote><p>ps: powershell cd 到的文件夹有空格或者是中文的时候需要用双引号括起来</p></blockquote><p>修改pip下载源到清华源 <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p>windows下，直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，新建文件pip.ini</p><p>将文件夹权限设置为完全控制，否则vscode没有权限配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\WINDOWS\system32&gt; <span class="built_in">cd</span> C:\\<span class="string">"Program Files"</span>\Python37\Scripts\</span><br><span class="line">PS C:\Program Files\Python37\Scripts&gt; python -m pip install --upgrade pip <span class="comment"># 更新pip</span></span><br></pre></td></tr></table></figure><p>在网页上找到下载对应的代码https://pytorch.org/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install https://download.pytorch.org/whl/cu100/torch-1.1.0-cp37-cp37m-win_amd64.whl</span><br><span class="line">pip3 install https://download.pytorch.org/whl/cu100/torchvision-0.3.0-cp37-cp37m-win_amd64.whl</span><br></pre></td></tr></table></figure><p>配置vscode</p><p>python.linting的配置（PEP8）</p><p>所有的变量名字都要大写，一些空格问题可以alt + shift + F 使用ypaf格式化</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;两个计划：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows从源代码编译安装tensorflow-gpu 和 pytorch&lt;/li&gt;
&lt;li&gt;利用wsl安装linux环境的tensorflow-cpu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;win10 python3.7.4环境配置&lt;/p&gt;
      
    
    </summary>
    
      <category term="环境配置" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>神经网络从经典到卷积</title>
    <link href="http://yoursite.com/2019/07/21/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BB%8E%E7%BB%8F%E5%85%B8%E5%88%B0%E5%8D%B7%E7%A7%AF/"/>
    <id>http://yoursite.com/2019/07/21/神经网络从经典到卷积/</id>
    <published>2019-07-21T06:48:14.000Z</published>
    <updated>2019-07-25T08:00:03.153Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><img src="https://antrovirens-1-1258258000.cos.ap-shanghai.myqcloud.com/post/190721/cover.jpg" alt="卷积神经网络"></div><p>神经网络是一种模拟人脑神经结构的计算机程序结构，以期能够实现人工智能的机器学习技术。本文将介绍神经网络背后的概念，并介绍如何通过编程实现神经网络。</p><h2 id="神经网络基础"><a class="markdownIt-Anchor" href="#神经网络基础"></a> 神经网络基础</h2><p>机器可以迅速做出大量的算术运算，但是无法处理图像中包含的大量信息。我们怀疑图像识别需要特别的人类智能， 而这是机器所缺乏的，人工智能所讨论的问题正是如此。</p><h3 id="简单的学习器"><a class="markdownIt-Anchor" href="#简单的学习器"></a> 简单的学习器</h3><p>一台基本的机器的工作流程，如下图所示，接受了一个问题并作出相应的思考，得到一个输出结果。</p><div align="center"><img src="https://antrovirens-1-1258258000.cos.ap-shanghai.myqcloud.com/post/190721/simple%20learning%20mechane.jpg" alt="简单的学习器" width="300" height="100"></div><p>所有有用的计算机系统都应该有一个输入和输出，并在输入和输出之间进行某种类型的计算。我们不能精确知道一些事务如何运行，但我们可以通过模型来估计其运作方式。改进这些模型的方法是通过输出值和真实值之间的比较得到偏移值，进一步调整参数。</p><p>以一个简单的分类器为例子，有二维坐标内有两个点系，聚集在两片区域，先要用一条直线将这两类特征分开，即为通过判断在直线的那一端来对这两类进行分类。</p><p>我们设计一条经过原点的直线 y = A * x 作为我们分类的依据。这条直线应该基于具体的坐标数值特征将两组点分割开来。</p><p>为简化工作，将实例简化为以下的表格。</p><table><thead><tr><th style="text-align:center">实例</th><th style="text-align:center">x坐标</th><th style="text-align:center">y坐标</th><th style="text-align:center">类别</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">3.0</td><td style="text-align:center">1.0</td><td style="text-align:center">A</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">1.0</td><td style="text-align:center">3.0</td><td style="text-align:center">B</td></tr></tbody></table><div align="center"><img src="https://antrovirens-1-1258258000.cos.ap-shanghai.myqcloud.com/post/190721/Figure_1.png" alt="线性分类器"></div><p>参数A控制着直线的斜率，我们给A赋予一个初值0.25，取x = 3.0, y = 0.75，我们所期望的直线应该经过A类别的上方，比如是1.1的目标值，我们可以利用这个误差来调整A值：</p><blockquote><p>误差值 = 期望目标值 - 实际输出值<br>E = 1.1 - 0.75 = 0.35</p></blockquote><p>分类器的线性函数应该修改为 t = (A + dA) * x</p><blockquote><p>E = t - y = (A + dA) * x - A * x = dA * x<br>dA = E / x = 0.35 / 3 = 0.1167</p></blockquote><p>这样A的新值化为A + dA =0.3667。 接下来可以接着输入B类的样本，使得A值进一步趋向于使直线略微低于B类点群的下方。但是这样的分类方法最终改进的直线不会顾及开始的训练值，而是仅仅考虑了最近的一组数据，这不是我们想要的结果。</p><p>机器学习中，我们应该进行适度改进（moderate），不应该改进过于激烈，当训练数据本身不能确定为完全正确，包含现实误差和噪声的时候，可以抑制这些影响因素。<br>在改进的公式中引入一个调节系数L，也是所谓的学习率（learning rate）</p><blockquote><p>dA = L * (E / x)</p></blockquote><p>选取L = 0.5 作为一个合理的系数，意味着我们只会更新值的一半。</p><p>一个简单的py实现样例代码如下。需要手工用文本写一个输入数据的文件classification cal sample.txt</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">datas = []  <span class="comment">#初始化</span></span><br><span class="line">file_object = open(<span class="string">'classification cal sample.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        <span class="comment"># do_somthing_with(line) #line带"\n"</span></span><br><span class="line">        line = line.replace(<span class="string">','</span>,<span class="string">' '</span>).replace(<span class="string">'\n'</span>,<span class="string">''</span>)  <span class="comment">#去除无用字符</span></span><br><span class="line">        num = list(map(float,line.split()))  <span class="comment"># 把空白行分离开，映射到表结构 参见python自带函数map() </span></span><br><span class="line">        datas.append(num) <span class="comment">#后续拓展表</span></span><br><span class="line">        <span class="comment">#print(datas)</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">     file_object.close() <span class="comment">#文件流关闭</span></span><br><span class="line"></span><br><span class="line">plt.figure(num = <span class="number">2019</span>, figsize = (<span class="number">5</span>, <span class="number">5</span>)) <span class="comment">#初始化图形，指定figure的编号并指定figure的大小</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line">    a = data[<span class="number">0</span>] <span class="comment"># xi</span></span><br><span class="line">    b = data[<span class="number">1</span>] <span class="comment"># yi</span></span><br><span class="line">    k = b / a</span><br><span class="line">    x = np.linspace(<span class="number">0</span>, a, int(<span class="number">50</span> * a))</span><br><span class="line">    y = k * x</span><br><span class="line">    plt.plot(x,y,color = <span class="string">'black'</span>, linewidth = <span class="number">1.0</span>, linestyle = <span class="string">'--'</span>) <span class="comment">#定义线性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># y = A * x    E = dA * x     dA= L * (E / x)</span></span><br><span class="line">A = <span class="number">0.1</span></span><br><span class="line">L = <span class="number">0.5</span> <span class="comment">#预设的初始值</span></span><br><span class="line"><span class="comment"># 进行简单的拟合  一个可循环的过程</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line">    E = data[<span class="number">1</span>] - A * data[<span class="number">0</span>] + data[<span class="number">1</span>] / <span class="number">10</span></span><br><span class="line">    dA = L * (E / data[<span class="number">0</span>])</span><br><span class="line">    A = A + dA</span><br><span class="line">    </span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">5</span>, <span class="number">250</span>) <span class="comment">#绘制图形</span></span><br><span class="line">y = A * x</span><br><span class="line">plt.plot(x,y,color = <span class="string">'green'</span>, linewidth = <span class="number">1.0</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>有时候一个分类器不足以解决问题，如果数据本身不是单一线性过程支配，那么一个简单的线性分类器不能对数据进行划分。例如逻辑上的异或问题（如下方图）。这样的问题需要多个线性分类器来共同解决</p><div align="center"><img src="https://antrovirens-1-1258258000.cos.ap-shanghai.myqcloud.com/post/190721/Figure_2.png" alt="多个线性分类器解决异或问题"></div><h3 id="神经元"><a class="markdownIt-Anchor" href="#神经元"></a> 神经元</h3><div align="center"><img src="https://antrovirens-1-1258258000.cos.ap-shanghai.myqcloud.com/post/190721/neuron.jpg" alt="神经元"></div><p>大脑神经的基本单元是神经元，虽然神经元有着多种形式，神经元都会将电信号从一段传递到另一端，沿着突触，将电信号从树突传递到树突。神经元主要结构可以分为树突和终端。一个神经元接受了电信号，当接受信号超过一定阈值（threshold），神经元被激发后链接电路，产生一个输出信号。</p><p>思考我们如何建模人工神经。生物神经元可以接受很多输出，我们需要将他们加权相加得到总输入，通过内在的阈值函数计算得到输出结果，可以提供信号给更多的神经元。将这种结构复制到人造模型的一种方法是构造多层神经元，如图所示</p><div align="center"><img src="https://antrovirens-1-1258258000.cos.ap-shanghai.myqcloud.com/post/190721/neural%20networks1.jpg" alt="neural networks"></div><p>每一层的节点都与所有下一层的节点通过一定的权重直接相连，通过调整节点之间的连接强度或阈值函数的形状来进行节点之间的强度调节</p><p>了解了处理结构之后，激活函数引入给我们的模型带入了非线性元素，可以处理更为复杂的问题，实际中较为常用的激活函数主要有三种，Sigmoid, tanh, 和ReLU</p><h4 id="sigmoid"><a class="markdownIt-Anchor" href="#sigmoid"></a> Sigmoid</h4><p>（这里是因为我的Katex公式渲染还有一点问题，还得待调试，下面把python的计算代码贴上来）</p><blockquote><p>y = 1 / (1 + np.exp(-x))</p></blockquote><div align="center"><img src="https://antrovirens-1-1258258000.cos.ap-shanghai.myqcloud.com/post/190721/Sigmoid%20Function.png" alt="Sigmoid Fuction"></div><p>Sigmoid函数经过激活之后的输出区间为（0，1），输入的数据越大，输出越接近1，否则越接近0。sigmoid函数与生物神经网络的工作机制很类似，在一开始作为激活函数时广泛收到大众认可，但他的缺点也非常明显，他的最大问题在于会导致模型的梯度消失，函数的导数取值区间为0~0.25，在后向传播时，每逆向经过一个节点就要乘以一个sigmoid的导数值，当模型层次达到一定程度时，会导致梯度值越来越小，直到消失。</p><h4 id="tanh"><a class="markdownIt-Anchor" href="#tanh"></a> tanh</h4><blockquote><p>y1 = (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x))</p></blockquote><div align="center"><img src="https://antrovirens-1-1258258000.cos.ap-shanghai.myqcloud.com/post/190721/Tanh%20Function.png" alt="tanh"></div><p>tanh函数的输出结果是中心对称的，解决了激活函数在模型优化中收敛速度变慢的问题，然鹅求导的取值区域为0~1，仍然不够大</p><h4 id="relu"><a class="markdownIt-Anchor" href="#relu"></a> ReLU</h4><blockquote><p>f(x)= max(0,x)</p></blockquote><div align="center"><img src="https://antrovirens-1-1258258000.cos.ap-shanghai.myqcloud.com/post/190721/ReLU%20Function.png" alt="ReLU"></div><p>ReLU修正线性单元 是现在在深度学习神经网络模型中使用率最高的激活函数，使用它在实际计算中非常高效，收敛速度非常快，但是函数特性可能会导致有一些神经元永远不会被激活，并且这些神经元参数不能被更新。这一般是由于模型参数在初始化的时候采用了全正或者全负的值，或者在后向传播中设置的学习率过高导致的。解决方法有对模型参数使用更高级的初始化方法，比如Xavier，以及合理的后向传播速率，推荐使用自适应的算法比如Adam</p><h3 id="追踪信号"><a class="markdownIt-Anchor" href="#追踪信号"></a> 追踪信号</h3><p>可以用矩阵的陈发表示所有的运算</p><blockquote><p><em>X = W * I</em></p></blockquote><p>W为权重矩阵，以第二层为视界，每一行为第一层的各个节点连接到第二层的某节点的权重序列;I矩阵为输入矩阵，X为组合调节之后的信号</p><blockquote><p><em>O = function(X)</em></p></blockquote><p>O表示着经过激活函数处理后的该层的所有输出</p><p>以一个结构为3x3的，有input、hidden、output层组成的神经网络作为算例，一次结果的输出过程如下：</p><blockquote><p>I : input_data<br><em>X<sub>hidden</sub> = W<sub>input_hidden</sub> · I</em><br><em>O<sub>hidden</sub> = sigmoid(X<sub>hidden</sub>)</em><br><em>X<sub>output</sub> = W<sub>hidden_output</sub> · O<sub>hidden</sub></em><br><em>O<sub>output</sub> = X<sub>output</sub></em></p></blockquote><h3 id="后向传播"><a class="markdownIt-Anchor" href="#后向传播"></a> 后向传播</h3><h3 id="更新权重"><a class="markdownIt-Anchor" href="#更新权重"></a> 更新权重</h3><h2 id="python神经网络编程"><a class="markdownIt-Anchor" href="#python神经网络编程"></a> python神经网络编程</h2><p>py搭建简单的三层神经网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.special</span><br><span class="line"><span class="comment">#定义三层神经网络</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">neuralNetwork</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, inputnodes, hiddennodes, outputnodes, learningrate)</span>:</span></span><br><span class="line">        self.inodes = inputnodes <span class="comment">#输入层</span></span><br><span class="line">        self.hnodes = hiddennodes <span class="comment">#隐藏层</span></span><br><span class="line">        self.onodes = outputnodes <span class="comment">#输出层</span></span><br><span class="line">        self.lr = learningrate</span><br><span class="line">        <span class="comment">#较为复杂的权重   中心值为0 标准差为传入节点数开方的倒数(-0.5次方) 的正态分布 </span></span><br><span class="line">        self.wih = np.random.normal(<span class="number">0.0</span>, pow(self.hnodes, <span class="number">-0.5</span>), (self.hnodes, self.inodes))  <span class="comment">#100 278</span></span><br><span class="line">        self.who = np.random.normal(<span class="number">0.0</span>, pow(self.onodes, <span class="number">-0.5</span>), (self.onodes, self.hnodes))  <span class="comment">#10 100</span></span><br><span class="line"></span><br><span class="line">        self.activation_function = <span class="keyword">lambda</span> x: scipy.special.expit(x)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, inputs_list, targets_list)</span>:</span></span><br><span class="line"></span><br><span class="line">        inputs = np.array(inputs_list, ndmin = <span class="number">2</span>).T  <span class="comment">#278*1</span></span><br><span class="line">        targets = np.array(targets_list, ndmin = <span class="number">2</span>).T <span class="comment"># 10*1</span></span><br><span class="line">        </span><br><span class="line">        hidden_inputs = np.dot(self.wih, inputs) <span class="comment">#100 1</span></span><br><span class="line">        </span><br><span class="line">        hidden_outputs = self.activation_function(hidden_inputs) <span class="comment">#100 1</span></span><br><span class="line"></span><br><span class="line">        final_inputs = np.dot(self.who, hidden_outputs) <span class="comment">#10 1</span></span><br><span class="line"></span><br><span class="line">        final_outputs = self.activation_function(final_inputs)  <span class="comment"># 10 1</span></span><br><span class="line"></span><br><span class="line">        output_errors = targets - final_outputs <span class="comment"># 10 1</span></span><br><span class="line"></span><br><span class="line">        hidden_errors = np.dot(self.who.T , output_errors) <span class="comment"># 100 1</span></span><br><span class="line">        <span class="comment">#更新层之间的权重 dWij = alpha * Ek * S(Ok) * (1 - S(Ok)) * Oj.T</span></span><br><span class="line">        self.who += self.lr * np.dot((output_errors * final_outputs * (<span class="number">1.0</span> - final_outputs)), np.transpose(hidden_outputs))</span><br><span class="line">        self.wih += self.lr * np.dot((hidden_errors * hidden_outputs * (<span class="number">1.0</span> - hidden_outputs)), np.transpose(inputs))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(self, inputs_list)</span>:</span></span><br><span class="line"></span><br><span class="line">        inputs = np.array(inputs_list, ndmin = <span class="number">2</span>).T   </span><br><span class="line">        hidden_inputs = np.dot(self.wih, inputs)</span><br><span class="line">        hidden_outputs = self.activation_function(hidden_inputs)</span><br><span class="line">        final_inputs = np.dot(self.who, hidden_outputs)</span><br><span class="line">        final_outputs = self.activation_function(final_inputs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> final_outputs</span><br><span class="line"></span><br><span class="line"><span class="comment">#set number</span></span><br><span class="line">input_nodes = <span class="number">784</span></span><br><span class="line">hidden_nodes = <span class="number">100</span></span><br><span class="line">output_nodes = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">learning_rate = <span class="number">0.3</span></span><br><span class="line"><span class="comment">#create instance of neural network</span></span><br><span class="line">n = neuralNetwork(input_nodes, hidden_nodes, output_nodes, learning_rate)</span><br><span class="line"></span><br><span class="line"><span class="comment">#train the neural network</span></span><br><span class="line">training_data_file = open(<span class="string">"mnist_train.csv"</span>,<span class="string">'r'</span>)</span><br><span class="line">training_data_list = training_data_file.readlines()</span><br><span class="line">training_data_file.close()</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> record <span class="keyword">in</span> training_data_list:</span><br><span class="line">    all_values = record.split(<span class="string">','</span>)</span><br><span class="line">    inputs = (np.asfarray(all_values[<span class="number">1</span>:]) / <span class="number">255.0</span> * <span class="number">0.99</span>) + <span class="number">0.01</span></span><br><span class="line">    <span class="comment">#print('正在训练第' + str(i) + '个')</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    targets = np.zeros(output_nodes) + <span class="number">0.01</span></span><br><span class="line">    targets[int(all_values[<span class="number">0</span>])] = <span class="number">0.99</span>   <span class="comment">#1*10</span></span><br><span class="line">    n.train(inputs, targets)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#print('训练结束\n')</span></span><br><span class="line"><span class="comment">#test the network</span></span><br><span class="line"></span><br><span class="line">test_data_file = open(<span class="string">"mnist_test.csv"</span>,<span class="string">'r'</span>)</span><br><span class="line">test_data_list = test_data_file.readlines()</span><br><span class="line">test_data_file.close()</span><br><span class="line">score = <span class="number">0</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> record <span class="keyword">in</span> test_data_list:</span><br><span class="line">    all_values = record.split(<span class="string">','</span>)</span><br><span class="line"><span class="comment">##    image_aarray = np.asfarray(all_values[1:]).reshape((28,28))</span></span><br><span class="line"><span class="comment">##    plt.imshow(image_aarray, cmap = 'Greys', interpolation = 'None')</span></span><br><span class="line"><span class="comment">##    plt.show()</span></span><br><span class="line">    correct_label = int(all_values[<span class="number">0</span>])</span><br><span class="line">    outputs = n.query((np.asfarray(all_values[<span class="number">1</span>:]) / <span class="number">255.0</span> * <span class="number">0.99</span>) + <span class="number">0.01</span>)</span><br><span class="line">    label = np.argmax(outputs)</span><br><span class="line">    <span class="comment">#print('correct:' + str(correct_label) +' result:' + str(label))</span></span><br><span class="line">    <span class="comment">#下面是随便写的  凑合着看看</span></span><br><span class="line">    <span class="keyword">if</span> label == correct_label:</span><br><span class="line">        score += <span class="number">1</span></span><br><span class="line">        num +=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">print(<span class="string">'score:'</span>+ str(score))</span><br><span class="line">print(<span class="string">'num:'</span> + str(num))</span><br><span class="line">print(<span class="string">'rate:'</span> + str(score/num))</span><br></pre></td></tr></table></figure><h2 id="深度学习框架下的神经网络编程"><a class="markdownIt-Anchor" href="#深度学习框架下的神经网络编程"></a> 深度学习框架下的神经网络编程</h2><h3 id="pytorch"><a class="markdownIt-Anchor" href="#pytorch"></a> pytorch</h3><h4 id="pytorch环境配置"><a class="markdownIt-Anchor" href="#pytorch环境配置"></a> Pytorch环境配置</h4><h5 id="env_torch配置"><a class="markdownIt-Anchor" href="#env_torch配置"></a> env_torch配置</h5><p>如果要安装可以在GPU上运行的版本，需要电脑配有NVDIA显卡，并且提前安装CUDA比较先进的版本<br>在anaconda的监视器界面中，新建一个包含适合pytorch工程的新环境，命名为env_tf，直接选择复制了tensorflow的环境然后把tf卸载掉<br>由于conda指令下载缓慢，选择pip下载，在环境prompt中分别输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip install https://download.pytorch.org/whl/cu100/torch-1.1.0-cp37-cp37m-win_amd64.whl</span><br><span class="line">pip install https://download.pytorch.org/whl/cu100/torchvision-0.3.0-cp37-cp37m-win_amd64.whl</span><br><span class="line">```   </span><br><span class="line">由于conda下载速度缓慢，建议使用加速器</span><br><span class="line"><span class="comment">##### jupyter notebook</span></span><br><span class="line">该IDE环境使用较多，可在env_torch内通过下方指令安装，建议连加速器</span><br><span class="line">```bash</span><br><span class="line">conda install jupyter</span><br></pre></td></tr></table></figure><h3 id="tensorflow"><a class="markdownIt-Anchor" href="#tensorflow"></a> tensorflow</h3><h2 id="卷积神经网络"><a class="markdownIt-Anchor" href="#卷积神经网络"></a> 卷积神经网络</h2><h3 id="卷积神经网络实战"><a class="markdownIt-Anchor" href="#卷积神经网络实战"></a> 卷积神经网络实战</h3><p>以简单的mnist手写字符训练集为例子</p><p>tensorflow实现的简单卷积神经网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载原始数据</span></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'C:/User/sheld/Desktop/data/'</span>, one_hot = <span class="literal">True</span>)</span><br><span class="line">sess = tf.InteractiveSession()</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化权重和偏值函数  并加入噪声</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    initial = tf.truncated_normal(shape, stddev = <span class="number">0.1</span>)  <span class="comment">#正态分布  噪声标准差设为0.1</span></span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    initial = tf.constant(<span class="number">0.1</span>, shape = shape) <span class="comment">#正值 0.1    return tf.Variable(initial)</span></span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义卷积层</span></span><br><span class="line"><span class="comment">#x：输入</span></span><br><span class="line"><span class="comment">#W：卷积参数 [a, b, c, d] a b 表示卷积核尺寸，c表示通道数， d表示卷积核数</span></span><br><span class="line"><span class="comment">#strides 步长</span></span><br><span class="line"><span class="comment">#padding 边界处理方式  same:输入和输出保持同样的尺寸</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x, W)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.conv2d(x, W, strides = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding = <span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义池化层</span></span><br><span class="line"><span class="comment">#2x2最大化池 缩小像素  把横竖步长设为2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pool_2x2</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(x, ksize = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], strides = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],</span><br><span class="line">                          padding = <span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#转化成2d结构  x是输入  y_是真实label</span></span><br><span class="line">x = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">784</span>]) <span class="comment">#输入的数据占位符</span></span><br><span class="line">y_ = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">10</span>]) <span class="comment">#输入的标签占位符</span></span><br><span class="line">x_image = tf.reshape(x, [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#卷积层1</span></span><br><span class="line">W_conv1 = weight_variable([<span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">32</span>])</span><br><span class="line">b_conv1 = bias_variable([<span class="number">32</span>])</span><br><span class="line">h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)</span><br><span class="line">h_pool1 = max_pool_2x2(h_conv1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#卷积层2</span></span><br><span class="line">W_conv2 = weight_variable([<span class="number">5</span>,<span class="number">5</span>,<span class="number">32</span>,<span class="number">64</span>])</span><br><span class="line">b_conv2 = bias_variable([<span class="number">64</span>])</span><br><span class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)</span><br><span class="line">h_pool2 = max_pool_2x2(h_conv2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#全连接层</span></span><br><span class="line">W_fc1 = weight_variable([<span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>, <span class="number">1024</span>])</span><br><span class="line">b_fc1 = bias_variable([<span class="number">1024</span>])</span><br><span class="line">h_pool2_flat = tf.reshape(h_pool2, [<span class="number">-1</span>, <span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>])</span><br><span class="line">h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Dropout层</span></span><br><span class="line">keep_prob = tf.placeholder(tf.float32)</span><br><span class="line">h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Softmax层</span></span><br><span class="line">W_fc2 = weight_variable([<span class="number">1024</span>, <span class="number">10</span>])</span><br><span class="line">b_fc2 = bias_variable([<span class="number">10</span>])</span><br><span class="line">y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义损失函数  应用Adam优化器</span></span><br><span class="line">cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y_conv),</span><br><span class="line">                                              reduction_indices = [<span class="number">1</span>])) <span class="comment">#交叉熵</span></span><br><span class="line">train_step = tf.train.AdamOptimizer(<span class="number">1e-4</span>).minimize(cross_entropy) <span class="comment">#梯度下降法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#评定精准率</span></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y_conv, <span class="number">1</span>), tf.argmax(y_, <span class="number">1</span>))  <span class="comment">#精确度计算</span></span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line"></span><br><span class="line"><span class="comment">#开始训练</span></span><br><span class="line">tf.global_variables_initializer().run()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20000</span>):</span><br><span class="line">    batch = mnist.train.next_batch(<span class="number">50</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">1</span> % <span class="number">100</span> ==<span class="number">0</span>:</span><br><span class="line">        train_accuracy = accuracy.eval(</span><br><span class="line">            feed_dict = &#123;x:batch[<span class="number">0</span>], y_:batch[<span class="number">1</span>], keep_prob: <span class="number">1.0</span>&#125;)</span><br><span class="line">        print(<span class="string">'step %d, training accuracy %g'</span>%(i,train_accuracy))</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    train_step.run(feed_dict = &#123;x:batch[<span class="number">0</span>], y_:batch[<span class="number">1</span>], keep_prob: <span class="number">0.5</span>&#125;)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">print(<span class="string">'test accuracy %g'</span> % accuracy.eval(</span><br><span class="line">    feed_dict = &#123;x:mnist.test.images, y_:mnist.test.labels, keep_prob: <span class="number">1.0</span>&#125;))</span><br></pre></td></tr></table></figure><p>pytorch实现的版本</p><pre class="highlight"><code class="python"></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://antrovirens-1-1258258000.cos.ap-shanghai.myqcloud.com/post/190721/cover.jpg&quot; alt=&quot;卷积神经网络&quot;&gt;
&lt;/div&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="神经网络" scheme="http://yoursite.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="卷积神经网络" scheme="http://yoursite.com/tags/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>About Me</title>
    <link href="http://yoursite.com/2019/07/14/About-Me/"/>
    <id>http://yoursite.com/2019/07/14/About-Me/</id>
    <published>2019-07-14T15:10:28.000Z</published>
    <updated>2019-07-15T14:10:40.166Z</updated>
    
    <content type="html"><![CDATA[<h2 id="i-am-just-an-ordinary-one"><a class="markdownIt-Anchor" href="#i-am-just-an-ordinary-one"></a> I am just an ordinary one</h2><p><img src="https://antrovirens-1-1258258000.cos.ap-shanghai.myqcloud.com/cover2.jpg" alt="tecent cos1" title="爱丽丝"></p><p><img src="https://antrovirens-1-1258258000.cos.ap-shanghai.myqcloud.com/cloud/%E7%88%B1%E4%B8%BD%E4%B8%9D2.jpg" alt="tecent cos2" title="爱丽丝2"></p><p><img src="https://antrovirens-1-1258258000.cos.ap-shanghai.myqcloud.com/cloud/%E9%AD%94%E7%90%86%E6%B2%99.jpg" alt="tecent cos3" title="魔理沙"></p><div style="align: center"><img src="https://antrovirens-1-1258258000.cos.ap-shanghai.myqcloud.com/cloud/%E7%88%B1%E4%B8%BD%E4%B8%9D2.jpg"></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;i-am-just-an-ordinary-one&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#i-am-just-an-ordinary-one&quot;&gt;&lt;/a&gt; I am just an ordinary one&lt;/h2&gt;
&lt;p&gt;&lt;im
      
    
    </summary>
    
      <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
      <category term="闲话" scheme="http://yoursite.com/tags/%E9%97%B2%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>Hello World, I&#39;m Antrovirens</title>
    <link href="http://yoursite.com/2019/07/14/hello-world/"/>
    <id>http://yoursite.com/2019/07/14/hello-world/</id>
    <published>2019-07-14T10:38:45.000Z</published>
    <updated>2019-07-21T15:49:25.876Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><img src="https://antrovirens-1-1258258000.cos.ap-shanghai.myqcloud.com/cloud/%E7%A7%98%E5%B0%812.png" alt="cover"></div><p>Hi~ I am Antrovirens, lucky to see you here.</p><h2 id="welcome-to-atrovirens-cafe-this-is-my-very-first-post"><a class="markdownIt-Anchor" href="#welcome-to-atrovirens-cafe-this-is-my-very-first-post"></a> Welcome to <a href="https://antrovirens.github.io/" target="_blank" rel="noopener">Atrovirens’ Cafe</a>! This is my very first post.</h2><p>在这里我将分享我自己的建站过程</p><h2 id="从hexo自定义到github部署"><a class="markdownIt-Anchor" href="#从hexo自定义到github部署"></a> 从hexo自定义到github部署</h2><p>Hexo 是一个基于 Node.js 的静态博客程序，可以方便的生成静态网页托管在github和Heroku上。</p><h3 id="hexo创建静态页面"><a class="markdownIt-Anchor" href="#hexo创建静态页面"></a> hexo创建静态页面</h3><h4 id="第一步-安装nodejs和git"><a class="markdownIt-Anchor" href="#第一步-安装nodejs和git"></a> <strong>第一步 安装Node.js和Git</strong></h4><p>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine.从官方页面下载持续支持版本的node.js(10.16.0 LTS)可执行安装程序<br>下载链接：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Download for Windows (x64)</a>.</p><p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.<br>下载链接：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">downloading the latest (2.22.0) 64-bit version of Git for Windows</a>.</p><h4 id="第二步-安装hexo"><a class="markdownIt-Anchor" href="#第二步-安装hexo"></a> <strong>第二步 安装hexo</strong></h4><p>在合适的位置新建一个文件夹，用于存储数据，比如我的就是C\hexo<br>在准备好的文件夹右键，open Git Bash here，或者直接打开Git Bash然后cd 到自己的目录下面<br>直接npm的话，有几个包会被墙无法下载，需要切换到国内源。<br>更新npm下载源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>安装 Hexo :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><p>g 是 global 全局的意思，会自动下载到全局文件夹里面，所以看到的你自己的文件夹里不会有东西。<br>这里会报一些错，就像下面的那些代码那样，大概是版本问题之类的东西，还有几个警告，完全不会影像hexo的运行，不用管就了。如果不放心的话，就把那些过期的包重新npm install -g 一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\hexo&gt;npm install hexo -g</span><br><span class="line">npm WARN deprecated core-js@1.2.7: core-js@&lt;2.6.8 is no longer maintained. Please, upgrade to core-js@3 or at least to actual version of core-js@2.</span><br><span class="line">C:\Users\sheld\AppData\Roaming\npm\hexo -&gt; C:\Users\sheld\AppData\Roaming\npm\node_modules\hexo\bin\hexo</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.9 (node_modules\hexo\node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@1.2.9: wanted &#123;<span class="string">"os"</span>:<span class="string">"darwin"</span>,<span class="string">"arch"</span>:<span class="string">"any"</span>&#125; (current: &#123;<span class="string">"os"</span>:<span class="string">"win32"</span>,<span class="string">"arch"</span>:<span class="string">"x64"</span>&#125;)</span><br></pre></td></tr></table></figure><p>安装依赖包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>在文件夹内初始化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>node_modules：是依赖包<br>public：存放的是生成的页面<br>scaffolds：命令生成文章等的模板<br>source：用命令创建的各种文章<br>themes：主题<br>_config.yml：整个博客的配置<br>db.json：source解析所得到的<br>package.json：项目所需模块项目的配置信息</p><h4 id="第三步-配置hexo"><a class="markdownIt-Anchor" href="#第三步-配置hexo"></a> <strong>第三步 配置hexo</strong></h4><p>生成网站:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>启动Hexo server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>成功后命令行提示如下 :</p><blockquote><p>INFO  Start processing<br>INFO  Hexo is running at <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>. Press Ctrl+C to stop.<br>表示Hexo服务已成功启动 , 在浏览器进入localhost:4000 即可查看页面</p></blockquote><p>在文件_config.yml中可以进行网站设置的修改，在theme相应文件夹下的_config.yml可以进行该主题网站页面布局的修改，网站内容的修改，例如下面片段</p><blockquote><p>title: Atrovirens’ Cáfe<br>subtitle: 来杯下午茶吧<br>description:<br>keywords:<br>author: antrovirens<br>language: 简体中文<br>timezone:</p></blockquote><h4 id="第四步-设置ssh"><a class="markdownIt-Anchor" href="#第四步-设置ssh"></a> <strong>第四步 设置ssh</strong></h4><p>如果还没有进行过git的初始配置，需要输入如下指令配置用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sheld@Antrovirens MINGW64 ~</span><br><span class="line">$ git config --global user.name <span class="string">"GitHub用户名"</span></span><br><span class="line">$ git config --global user.email <span class="string">"GitHub邮箱"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ ls  <span class="comment">#或者 ll 查看文件夹内有无ssh配置文件</span></span><br></pre></td></tr></table></figure><p>生成ssh密钥文件，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"GitHub邮箱"</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/sheld/.ssh/id_rsa):</span><br><span class="line"><span class="comment">#这里是要创建文件夹保存，输入文件夹名，直接回车就是默认位置</span></span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line"><span class="comment">#这里输入配置的post密码  最小位数不少于5位，而且还不能太简单那，否则会失败</span></span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/sheld/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/sheld/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:**一段乱码** your_github_email@outlook.com</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|    ?????????    |</span></span><br><span class="line"><span class="string">|    ?????????    |</span></span><br><span class="line"><span class="string">|   这是一张图片   |</span></span><br><span class="line"><span class="string">|  ?????????????? |</span></span><br><span class="line"><span class="string">|  ?????????????? |</span></span><br><span class="line"><span class="string">|  ?????????????? |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sheld@Antrovirens MINGW64 ~/.ssh</span></span><br><span class="line"><span class="string">$ cat id_rsa.pub</span></span><br><span class="line"><span class="string">ssh-rsa **一段很长的乱码**  your_github_email@outlook.com</span></span><br><span class="line"><span class="string">#用指令查看你的ssh密钥，然后添加到你的Githu账号里面去</span></span><br><span class="line"><span class="string">#添加成功后，可以输入下面语句，输入post密码之后，弹出类似语句表示创建成功</span></span><br><span class="line"><span class="string">$ ssh -T git@github.com</span></span><br><span class="line"><span class="string">Enter passphrase for key '</span>/c/Users/sheld/.ssh/id_rsa<span class="string">':</span></span><br><span class="line"><span class="string">Hi Antrovirens! You'</span>ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><h4 id="第五步-部署到github"><a class="markdownIt-Anchor" href="#第五步-部署到github"></a> <strong>第五步 部署到Github</strong></h4><p>在你的github下新建一个名字必须为username.github.io的个人仓库作为你的网站环境，我是很久之前做的了，具体步骤我也不去回忆了，不服责任的扔一个网址https://jingyan.baidu.com/article/e8cdb32b0ce12137042bad51.html<br>在username.github.io仓库下通过ssh clone得到ssh链接，在你的config文件下的deploy项目下修改相关信息，可以参考官方文档</p><blockquote><p># Deployment<br>## Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">https://hexo.io/docs/deployment.html</a><br>deploy:<br>type: git<br>repository: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:Antrovirens/antrovirens.github.io.git<br>branch: master</p></blockquote><p>接下来就可以直接部署了，一般的部署流程如下流程，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d </span><br><span class="line">ERROR Deployer not found: git</span><br><span class="line">$ npm install --save hexo-deployer-git</span><br><span class="line">$ hexo d </span><br><span class="line"><span class="comment">#一段代码流和等待之后。。。</span></span><br><span class="line">INFO  Deploy <span class="keyword">done</span>: git</span><br></pre></td></tr></table></figure><p>完事大吉 欣赏自己的网站8</p><h4 id="extra-因为偷懒又拖后的关于网站页面diy的简单介绍"><a class="markdownIt-Anchor" href="#extra-因为偷懒又拖后的关于网站页面diy的简单介绍"></a> extra 因为偷懒又拖后的关于网站页面DIY的简单介绍</h4><p>咕咕咕 或许明天会更新</p><p>已经做了： 部署rss订阅源   新建文章   更换封面图片  流量统计  文章中插入图片  更多文字样式   gitalk<br>准备做：  About页面的书写 readme.md文件的保留   插入复杂数学公式</p><p><strong>如何插入图片</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![Alt text](图片链接 &quot;optional title&quot;)</span><br><span class="line">![avatar](/home/picture/1.png)</span><br><span class="line">![avatar](http://baidu.com/pic/doge.png)</span><br></pre></td></tr></table></figure><p><strong>如何使图片水平居中</strong><br>基础方法，代码如下</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align = <span class="string">"center"</span>&gt;</span><br><span class="line">&lt;img src = <span class="string">""</span> alt = <span class="string">""</span> /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div align= <span class="string">"center"</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">"https://antrovirens-1-1258258000.cos.ap-shanghai.myqcloud.com/post/190721/simple%20learning%20mechane.jpg"</span> alt = <span class="string">"简单的学习器"</span> width=<span class="string">"300"</span> height=<span class="string">"100"</span>/&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>接下来的两个方法我没有试过，相关知识可以去W3chool上自己看<br>利用margin: 0 auto实现图片水平居中,利用margin: 0 auto实现图片居中就是在图片上加上css样式margin: 0 auto 如下：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">"text-align: center; width: 500px; border: green solid 1px;"</span>&gt;</span><br><span class="line">&lt;img alt=<span class="string">""</span> src=<span class="string">"https://www.baidu.com/img/baidu_jgylogo3.gif"</span> style=<span class="string">"margin: 0 auto;"</span> /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>利用文本的水平居中属性text-align: center,代码如下:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">"text-align: center; width: 500px; border: green solid 1px;"</span>&gt;</span><br><span class="line">&lt;img alt=<span class="string">""</span> src=<span class="string">"https://www.baidu.com/img/baidu_jgylogo3.gif"</span> style=<span class="string">"display: inline-block;"</span> /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>如何插入公式</strong><br>转自xinet的博客 <a href="https://www.cnblogs.com/q735613050/p/7253073.html" target="_blank" rel="noopener">https://www.cnblogs.com/q735613050/p/7253073.html</a></p><p>行中公式(放在文中与其它文字混编)可以用如下方法表示：<br><code>$ 数学公式 $</code><br>独立公式可以用如下方法表示：<br><code>$$ 数学公式 $$</code></p><p>^表示上标, _ 表示下标。如果上下标的内容多于一个字符，需要用{}将这些内容括成一个整体。上下标可以嵌套，也可以同时使用。<br>例子：<br><code>$$ x^{y^z}=(1+{\rm e}^x)^{-2xy^w} $$</code></p>x^{y^z}=(1+{\rm e}^x)^{-2xy^w} <p>另外，如果要在左右两边都有上下标，可以用\sideset 命令<br><code>$$ \sideset{^1_2}{^3_4}\bigotimes $$</code></p>\sideset{^1_2}{^3_4}\bigotimes <p>()、[]和|表示符号本身，使用 <code>\{\}</code> 来表示 {}。当要显示大号的括号或分隔符时，要用 \left 和 \right 命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$$\langle表达式\rangle$$ 尖括号</span><br><span class="line">$$\lceil表达式\rceil$$ 向下取整</span><br><span class="line">$$\lfloor表达式\rfloor$$ 向上取整</span><br><span class="line">$$\lbrace表达式\rbrace$$ &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>$$ f(x,y,z) = 3y^2z \left( 3+\frac{7x+5}{1+y^2} \right) $$</code></p><blockquote><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo>)</mo><mo>=</mo><mn>3</mn><msup><mi>y</mi><mn>2</mn></msup><mi>z</mi><mrow><mo fence="true">(</mo><mn>3</mn><mo>+</mo><mfrac><mrow><mn>7</mn><mi>x</mi><mo>+</mo><mn>5</mn></mrow><mrow><mn>1</mn><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">f(x,y,z) = 3y^2z \left( 3+\frac{7x+5}{1+y^2} \right) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.45em;"></span><span class="strut bottom" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathrm">3</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord mathrm">3</span><span class="mbin">+</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.6860000000000002em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathrm">1</span><span class="mbin">+</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="vlist"><span style="top:-0.289em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathrm">7</span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathrm">5</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p></blockquote><p>通常使用 \frac {分子} {分母}命令产生一个分数\frac {分子} {分母}，分数可嵌套。<br>便捷情况可直接输入 \frac ab来快速生成一个\frac ab。<br>如果分式很复杂，亦可使用 分子 \over 分母 命令，此时分数仅有一层。</p><p>使用 \sqrt [根指数，省略时为2] {被开方数}命令输入开方。</p><p>数学公式中常见的省略号有两种，\ldots 表示与文本底线对齐的省略号，\cdots 表示与文本中线对齐的省略号。</p><p>使用 \vec{矢量}来自动产生一个矢量。也可以使用 \overrightarrow等命令自定义字母上方的符号。<br><code>$$\overleftarrow{xy} \quad and \quad \overleftrightarrow{xy} \quad and \quad \overrightarrow{xy}$$</code></p>\overleftarrow{xy} \quad and \quad \overleftrightarrow{xy} \quad and \quad \overrightarrow{xy}<p>使用 \int_积分下限^积分上限 {被积表达式} 来输入一个积分。</p><p>使用\lim_{变量 \to 表达式} 表达式 来输入一个极限。如有需求，可以更改 \to 符号至任意符号。</p><p>使用 \sum_{下标表达式}^{上标表达式} {累加表达式}来输入一个累加。<br>与之类似，使用 \prod \bigcup \bigcap来分别输入累乘、并集和交集。<br>此类符号在行内显示时上下标表达式将会移至右上角和右下角。<br><code>$$\sum_{i=1}^n \frac{1}{i^2} \quad and \quad \prod_{i=1}^n \frac{1}{i^2} \quad and \quad \bigcup_{i=1}^{2} R$$</code></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mfrac><mrow><mn>1</mn></mrow><mrow><msup><mi>i</mi><mn>2</mn></msup></mrow></mfrac><mspace width="1em"></mspace><mi>a</mi><mi>n</mi><mi>d</mi><mspace width="1em"></mspace><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mfrac><mrow><mn>1</mn></mrow><mrow><msup><mi>i</mi><mn>2</mn></msup></mrow></mfrac><mspace width="1em"></mspace><mi>a</mi><mi>n</mi><mi>d</mi><mspace width="1em"></mspace><msubsup><mo>⋃</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mn>2</mn></mrow></msubsup><mi>R</mi></mrow><annotation encoding="application/x-tex">\sum_{i=1}^n \frac{1}{i^2} \quad and \quad \prod_{i=1}^n \frac{1}{i^2} \quad and \quad \bigcup_{i=1}^{2} R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.8011130000000004em;"></span><span class="strut bottom" style="height:3.0787820000000004em;vertical-align:-1.277669em;"></span><span class="base displaystyle textstyle uncramped"><span class="mop op-limits"><span class="vlist"><span style="top:1.1776689999999999em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.000005000000000143778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span><span class="op-symbol large-op mop">∑</span></span></span><span style="top:-1.2500050000000003em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord"><span class="mord mathit">i</span><span class="vlist"><span style="top:-0.289em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mord mspace quad"></span><span class="mord mathit">a</span><span class="mord mathit">n</span><span class="mord mathit">d</span><span class="mord mspace quad"></span><span class="mop op-limits"><span class="vlist"><span style="top:1.1776689999999999em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.000005000000000143778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span><span class="op-symbol large-op mop">∏</span></span></span><span style="top:-1.2500050000000003em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord"><span class="mord mathit">i</span><span class="vlist"><span style="top:-0.289em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mord mspace quad"></span><span class="mord mathit">a</span><span class="mord mathit">n</span><span class="mord mathit">d</span><span class="mord mspace quad"></span><span class="mop op-limits"><span class="vlist"><span style="top:1.1776689999999999em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.000005000000000143778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span><span class="op-symbol large-op mop">⋃</span></span></span><span style="top:-1.2500050000000003em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit" style="margin-right:0.00773em;">R</span></span></span></span></span></p><p>输入 \小写希腊字母英文全称和\首字母大写希腊字母英文全称来分别输入小写和大写希腊字母。<br>对于大写希腊字母与现有字母相同的，直接输入大写字母即可。</p><p>使用 \left和 \right来创建自动匹配高度的 (圆括号)，[方括号] 和 {花括号} 。<br>在每个公式末尾前使用\tag{行标}来实现行标。</p><p>若要对公式的某一部分字符进行字体转换，可以用 {\字体 {需转换的部分字符}} 命令，其中 \字体 部分可以参照下表选择合适的字体。一般情况下，公式默认为意大利体.</p><blockquote><p>\rm罗马体<br>\boldsymbol黑体<br>\mit数学斜体<br>\bf粗体</p></blockquote><p><strong>Gitalk配置</strong></p><p>github - setting - developing settings - OAuth Apps -Register - 主页和返回也都填写为自己的homepage;<br>结束后得到一个ID 和 密钥，填写到主题文件夹之下的config文件里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">    # 是否自动展开评论框</span><br><span class="line">    autoExpand: false</span><br><span class="line">    # 应用编号</span><br><span class="line">    clientID: &apos;**********&apos;</span><br><span class="line">    # 应用秘钥</span><br><span class="line">    clientSecret: &apos;***************&apos;</span><br><span class="line">    # issue仓库名</span><br><span class="line">    repo: &apos;antrovirens.github.io&apos;</span><br><span class="line">    # Github名</span><br><span class="line">    owner: &apos;antrovirens&apos;</span><br><span class="line">    # Github名</span><br><span class="line">    admin: [&apos;antrovirens&apos;]</span><br><span class="line">    # Ensure uniqueness and length less than 50</span><br><span class="line">    id: location.pathname</span><br><span class="line">    # Facebook-like distraction free mode</span><br><span class="line">    distractionFreeMode: false</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://antrovirens-1-1258258000.cos.ap-shanghai.myqcloud.com/cloud/%E7%A7%98%E5%B0%812.png&quot; alt=&quot;cover&quot;&gt;
&lt;/d
      
    
    </summary>
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="博客搭建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
